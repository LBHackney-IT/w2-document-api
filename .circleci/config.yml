version: 2.1

executors:
  my-executor:
    docker:
      - image: circleci/node:12.13

    working_directory: ~/repo

jobs:
  build:
    executor: my-executor

    steps:
      - checkout

      - run:
          name: Concatenate all package-lock.json files into single file for checksum
          command: cat package.json api/package.json authorizer/package.json > combined-package-lock.txt

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            sudo npm i && pushd api && npm install && popd && pushd authorizer && npm install && popd

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}-{{ checksum "combined-package-lock.txt" }}

      - run:
          name: Run tests with coverage
          command: pushd api && npm run test-coverage && popd

      - persist_to_workspace:
          root: ~/repo
          paths: .

  deploy-staging:
    executor: my-executor

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Set AWS credentials
          command: |
            pushd ~ && serverless config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

      - run:
          name: Deploy application
          command: sls deploy -s staging

  deploy-production:
    executor: my-executor

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Install Serverless CLI
          command: |
            sudo npm i -g serverless

      - run:
          name: Set AWS credentials
          command: |
            pushd ~ && serverless config credentials -p aws -k ${AWS_ACCESS_KEY_ID} -s ${AWS_SECRET_ACCESS_KEY} -n hackney && popd

      - run:
          name: Deploy application
          command: sls deploy -s production

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          requires:
            - permit-deploy-production
